import random
import json
import csv
import os

def intro():
    print("Вы находитесь в загадочном лесу. Перед вами дорога, разветвляющаяся налево и направо.\n")

def make_choice():
    print()
    choice = input("Куда вы пойдете? (введите 'налево' или 'направо'): ")
    print("--------------")
    return choice

def forest_left():
    print("Вы пошли налево и наткнулись на старую хижину в лесу.\n")
    print("В хижине вы встречаете старого волшебника.\n")
    print("Старый волшебник: Добро пожаловать, путник! Вы желаете остаться и узнать больше о лесе?\n")
    choice = input("Что вы выберете? ('остаться' или 'продолжить'): \n")
    print("--------------")
    if choice == 'остаться':
        print("Вы остаетесь и проводите несколько часов, узнавая о лесе и его секретах.\n")
        print("Волшебник: Вот вам зелье здоровья в награду за вашу мудрость. Удачи в пути!\n")
    else:
        print("Вы решаете продолжить свой путь вглубь леса.\n")
        print("Вы встречаете деревянного голема, который стоит на вашем пути.\n")
        print("Чтобы пройти мимо голема, вам нужно ответить на загадку.\n")

        riddle = "Что имеет корни, но не растет, и никогда не двигается?\n"
        user_answer = input(f"Загадка: {riddle}\nВаш ответ: ").lower()
        if (user_answer == "горы") | (user_answer == "гора"):

            print("Вы правильно ответили! Голем пропускает вас.\n")
            print("--------------")
            print("Продолжая свой путь, вы находите старинный храм.\n")
            print("Вы можете войти в храм или вернуться на развилку.\n")

            choice = input("Что вы выберете? ('войти' или 'назад'): \n")
            print("--------------")
            if choice == 'войти':
                print("Вы вошли в храм и обнаружили древний свиток.\n")
                print("Свиток содержит таинственные символы и загадочные инструкции.\n")
                print("Вы можете решить загадку на свитке или вернуться на развилку.\n")
                choice = input("Что вы выберете? ('решить' или 'назад'): \n")
                print("--------------")
                if choice == 'решить':
                    print("Вы успешно решили загадку и получили магический артефакт!\n")

                else:
                    print("Вы вернулись на развилку.\n")

            else:
                print("Вы вернулись на развилку.\n")

        else:
            print("Ваш ответ неверный. Голем не позволяет вам пройти.\n")
        print("--------------")

def tragic_ending():

    print("Вы решаете идти прямо и внезапно попадаете в засаду, подстроенную темными силами.\n")
    print("Они атакуют вас, и вы сражаетесь с отчаянием, но, к сожалению, ваши силы оказываются недостаточными.\n")
    print("Ваше приключение в лесу заканчивается трагически.\n")
    print("--------------")

def bridge():
    print("Вы решаете перейти мост.")
    print("Мост начинает скрипеть, но вы успешно переходите на другую сторону реки.\n")
    print("По другую сторону вы видите таинственное здание, похожее на заброшенное замечательное.\n")
    print("Вы можете исследовать здание или вернуться на развилку.\n")
    choice = input("Что вы выберете? ('исследовать' или 'назад'): \n")
    print("--------------")
    if choice == 'исследовать':
        print("Вы решаете исследовать здание и находите много сокровищ и древних реликвий.\n")
        print("Ваше приключение в лесу завершается с богатыми наградами!\n")
    else:
        print("Вы решаете вернуться на развилку.\n")

def forest_right():
    print("--------------")
    print("Вы пошли направо и наткнулись на реку.\n")
    print("Чтобы перейти реку, вам нужно построить плот.\n")

    material = random.choice(["дерево", "пальто", "лианы"])
    print(f"Вы собрали {material} для постройки плота.\n")
    print("Чтобы построить плот, вам нужен инструмент. Вы можете вернуться на развилку и искать инструмент или продолжить собирать материалы.\n")

    choice = input("Что вы выберете? ('инструмент' или 'материалы'): \n")
    print("--------------")
    if choice == 'инструмент':
        print("Вы вернулись на развилку в поисках инструмента.\n")
        print("На развилке вы встречаете странного торговца.\n")
        print("Торговец: Я могу предложить вам инструмент, но за обмен на что-то ценное.\n")
        choice = input("Что вы предложите торговцу? ('золото' или 'зелье здоровья'): \n")
        print("--------------")
        if choice == 'золото':
            print("Торговец: Согласен, вот инструмент. Надеюсь, он вам пригодится.\n")

        elif choice == 'зелье здоровья':
            print("Торговец: Выбор сделан. Вот ваш инструмент. Я надеюсь, что зелье пригодится вам больше.\n")

        else:
            print("Торговец: Мне не нравится ваше предложение. У вас нет выбора.\n")
            print("Теперь у вас есть инструмент для постройки плота.\n")
            print("Вы возвращаетесь к реке и строите плот.\n")
            print("Вы переплываете реку и продолжаете свой путь.\n")
            print("Вы встречаете старинный мост через реку.\n")
            print("Вы можете перейти мост или вернуться на развилку.\n")

        choice = input("Что вы выберете? ('мост' или 'назад'): \n")
        print("--------------")
        if choice == 'мост':
            bridge()
        else:
            print("Вы решаете вернуться на развилку.\n")

    elif choice == 'материалы':
        print("Вы продолжили собирать материалы.\n")
        print("Вы можете вернуться назад к реке или пойти вперед.\n")
        choice = input("Что вы выберете? ('назад' или 'вперед'): \n")
        print("--------------")
        if choice == 'назад':
            print("Вы возвращаетесь к реке.\n")

        elif choice == 'вперед':
            print("Вы решаете идти вперед.\n")
            print("Вы встречаете деревянный мост через реку, но он выглядит ненадежно.\n")
            print("Вы можете перейти мост или вернуться на развилку.\n")
            choice = input("Что вы выберете? ('мост' или 'назад'): \n")
            print("--------------")
            if choice == 'мост':
                bridge()
            else:
                print("Вы решаете вернуться на развилку.\n")

        elif choice == 'вперед':
            tragic_ending()

def save_game_state(game_state, file_name):
    with open(file_name, 'w') as json_file:
        json.dump(game_state, json_file)

def load_game_state(file_name):
    try:
        with open(file_name, 'r') as json_file:
            return json.load(json_file)
    except FileNotFoundError:
        return None

def delete_save(file_name):
    try:
        os.remove(file_name)
        print("Сохранение успешно удалено.")
    except FileNotFoundError:
        print("Сохранение не найдено.")

def append_to_csv(data, csv_file):
    with open(csv_file, 'a', newline='') as csvfile:
        fieldnames = ['player_name', 'outcome']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        for row in data:
            writer.writerow({'player_name': row['player_name'], 'outcome': row['outcome']})

def main():
    intro()
    choice = make_choice()

    if choice == 'налево':
        forest_left()
    elif choice == 'направо':
        forest_right()
    else:
        print("Вы не сделали правильного выбора. Игра завершена.\n")

    player_name = input("Введите ваше имя: ")
    outcome = "Успех" if choice == 'войти' and sub_choice == 'решить' else "Поражение"
    game_state = {'player_name': player_name, 'outcome': outcome}
    save_game_state(game_state, 'save.json')

    saved_data = load_game_state('save.json')
    if saved_data:
        print(f"Загружено сохранение для игрока {saved_data['player_name']} с результатом {saved_data['outcome']}.")
    else:
        print("Сохранение не найдено.")

    delete_save('save.json')

    all_data = [{'player_name': 'Игрок1', 'outcome': 'Успех'}, {'player_name': 'Игрок2', 'outcome': 'Поражение'}]
    all_data.append({'player_name': player_name, 'outcome': outcome})
    
    # Добавлено обновление данных в JSON файле после каждого завершения игры
    save_game_state(all_data, 'all_data.json')

    # Добавлено обновление данных в CSV файле после каждого завершения игры
    append_to_csv(all_data, 'game_data.csv')

if __name__ == "__main__":
    main()
